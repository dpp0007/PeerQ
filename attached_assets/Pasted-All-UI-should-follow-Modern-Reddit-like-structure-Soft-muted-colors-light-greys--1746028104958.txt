All UI should follow:
- **Modern Reddit-like structure**  
- **Soft, muted colors** (light greys, pastel blues, subtle highlights)  
- **Good spacing, padding, and readable fonts**  
- **Swing** for GUI (JavaFX if preferred for smoother effects)

---

## ✅ Prompt 1: `DBConnection.java` (Database Utility)

> **Prompt:**  
Generate a `DBConnection.java` file in Java. It should connect to a local MySQL database named `peerq_db` using JDBC. Use standard connection logic with exception handling and a reusable `getConnection()` method that returns a `Connection` object. Follow best practices for JDBC connection pooling (without third-party libraries). No GUI in this file.

---

## ✅ Prompt 2: `User.java` (Model)

> **Prompt:**  
Create a Java class `User` in the `model` package. It should represent a user in the PeerQ system with fields: `id`, `name`, `email`, and `password`. Include constructors, getters, setters, and `toString()`. The class should be POJO-style and support serialization.

---

## ✅ Prompt 3: `UserDAO.java` (DAO)

> **Prompt:**  
Generate a `UserDAO.java` class that uses JDBC to interact with the `users` table in a MySQL database. Include methods for:
- `registerUser(User user)`
- `validateLogin(String email, String password)`
- `getUserById(int id)`  
Handle SQL exceptions and ensure secure query execution using **PreparedStatement**.

---

## ✅ Prompt 4: `LoginForm.java` (GUI)

> **Prompt:**  
Create a modern `LoginForm.java` using Java Swing for a Reddit-inspired Java desktop application.  
Design:  
- Soft, modern color scheme (light grey background, soft blue buttons)  
- Fields: Email, Password  
- Buttons: Login, Register  
- On successful login, open `Dashboard.java`  
Use `JPanel`, `JLabel`, `JTextField`, `JPasswordField`, and `JButton` with proper alignment, spacing, and fonts. Follow modern UI practices and avoid outdated Swing design.

---

## ✅ Prompt 5: `RegisterForm.java` (GUI)

> **Prompt:**  
Create `RegisterForm.java` using Java Swing for user registration.  
Fields: Name, Email, Password, Confirm Password  
Soft modern UI (light grey background, pastel blue input fields, soft shadows)  
Include validation logic (empty fields, password match)  
On successful registration, redirect to `LoginForm.java`  
Use clean layout with padding and spacing like Reddit’s signup experience.

---

## ✅ Prompt 6: `Dashboard.java` (Main Question Feed)

> **Prompt:**  
Generate a `Dashboard.java` class in Java Swing that displays a Reddit-like feed of questions from the database.  
Design:
- List of questions as scrollable cards (title, short body, tags, posted by, timestamp)  
- Sidebar (optional) for filters: "All", "My Questions", "Unanswered", "Solved"  
- Soft, modern UI: light theme with spacing and rounded panels  
- Use `JPanel` inside `JScrollPane` for feed layout  
Each question card should open `ViewQuestion.java` on click.

---

## ✅ Prompt 7: `AskQuestionForm.java` (GUI)

> **Prompt:**  
Create `AskQuestionForm.java` using Swing.  
Form with fields:
- Question Title (single-line)
- Description (multi-line `JTextArea`)
- Tags (comma-separated)  
Submit button that inserts into MySQL via `QuestionDAO`  
Follow modern UI: soft colors, generous padding, responsive button layout

---

## ✅ Prompt 8: `ViewQuestion.java` (Answers + Answer Form)

> **Prompt:**  
Create `ViewQuestion.java` in Java Swing to show full question details and answers.  
Design:
- Top section: Question title, body, tags, user, date
- Below: List of answers (scrollable cards with text, upvote button, timestamp)
- Bottom: Answer submission area with `JTextArea` + submit button
- Upvote button should call `VoteDAO` to record upvote  
UI inspired by Reddit’s thread structure: soft rounded cards, spacing, light pastel theme

---

## ✅ Prompt 9: `AnswerDAO.java`

> **Prompt:**  
Generate `AnswerDAO.java` to manage answers for questions.  
Include methods:
- `getAnswersByQuestionId(int questionId)` – return list of answers  
- `submitAnswer(Answer answer)`  
- `upvoteAnswer(int answerId, int userId)` – update upvotes and prevent multiple votes using `votes` table  
Use JDBC best practices with `PreparedStatement`.

---

## ✅ Prompt 10: `QuestionDAO.java`

> **Prompt:**  
Create `QuestionDAO.java` to handle operations on the `questions` table.  
Methods:
- `addQuestion(Question q)`
- `getAllQuestions()`
- `getQuestionsByUserId(int userId)`
- `getUnansweredQuestions()`  
Return a `List<Question>` for dashboard population. Handle MySQL errors cleanly.

---

## ✅ Prompt 11: `Main.java` (App Entry)

> **Prompt:**  
Create `Main.java` with a `main()` method to start the PeerQ app.  
The app should first open the `LoginForm.java` window.  
Use proper threading (`SwingUtilities.invokeLater`) to launch the GUI.